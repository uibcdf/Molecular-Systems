{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "93cf335d24e7484fa207cfb9ffd91bd0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from simtk import unit\n",
    "from simtk import openmm as omm\n",
    "from simtk.openmm import app\n",
    "import molsysmt as msm\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Alanine dipeptide in explicit solvent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With OpenMM from scratch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from molecular_systems import files\n",
    "pdbfile_path = files.alanine_dipeptide['octahedral_14.pdb']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "</style><table id=\"T_b3211_\" ><thead>    <tr>        <th class=\"col_heading level0 col0\" >form</th>        <th class=\"col_heading level0 col1\" >n_atoms</th>        <th class=\"col_heading level0 col2\" >n_groups</th>        <th class=\"col_heading level0 col3\" >n_components</th>        <th class=\"col_heading level0 col4\" >n_chains</th>        <th class=\"col_heading level0 col5\" >n_molecules</th>        <th class=\"col_heading level0 col6\" >n_entities</th>        <th class=\"col_heading level0 col7\" >n_waters</th>        <th class=\"col_heading level0 col8\" >n_peptides</th>        <th class=\"col_heading level0 col9\" >n_frames</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                                <td id=\"T_b3211_row0_col0\" class=\"data row0 col0\" >pdb</td>\n",
       "                        <td id=\"T_b3211_row0_col1\" class=\"data row0 col1\" >4333</td>\n",
       "                        <td id=\"T_b3211_row0_col2\" class=\"data row0 col2\" >1440</td>\n",
       "                        <td id=\"T_b3211_row0_col3\" class=\"data row0 col3\" >1438</td>\n",
       "                        <td id=\"T_b3211_row0_col4\" class=\"data row0 col4\" >1</td>\n",
       "                        <td id=\"T_b3211_row0_col5\" class=\"data row0 col5\" >1438</td>\n",
       "                        <td id=\"T_b3211_row0_col6\" class=\"data row0 col6\" >2</td>\n",
       "                        <td id=\"T_b3211_row0_col7\" class=\"data row0 col7\" >1437</td>\n",
       "                        <td id=\"T_b3211_row0_col8\" class=\"data row0 col8\" >1</td>\n",
       "                        <td id=\"T_b3211_row0_col9\" class=\"data row0 col9\" >1</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7ff0d686dcd0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "msm.info(pdbfile_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a3d8becc6bd40458f54d91c286d47d3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view(pdbfile_path, surface=True)\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before energy minimization: -17415.342173066165 kJ/mol\n",
      "After energy minimization: -70224.23182850215 kJ/mol\n"
     ]
    }
   ],
   "source": [
    "temperature = 300.0*unit.kelvin\n",
    "collisions_rate = 1.0/unit.picoseconds\n",
    "total_time = 50.0*unit.picoseconds\n",
    "saving_timestep = 1.0*unit.picoseconds\n",
    "integration_timestep = 2.0*unit.femtoseconds\n",
    "\n",
    "steps_per_cicle = round(saving_timestep/integration_timestep)\n",
    "n_steps = round(total_time/integration_timestep)\n",
    "n_cicles = round(n_steps/steps_per_cicle)\n",
    "\n",
    "pdbfile = app.PDBFile(pdbfile_path)\n",
    "\n",
    "topology = pdbfile.topology\n",
    "positions = pdbfile.positions\n",
    "\n",
    "forcefield = app.ForceField('amber14-all.xml', 'amber14/tip3p.xml')\n",
    "\n",
    "system = forcefield.createSystem(topology,\n",
    "                                 nonbondedMethod=app.PME, nonbondedCutoff=9.0*unit.angstroms,\n",
    "                                 switchDistance=7.5*unit.angstroms,\n",
    "                                 rigidWater=True, constraints=app.HBonds, hydrogenMass=None)\n",
    "\n",
    "forces = {ii.__class__.__name__ : ii for ii in system.getForces()}\n",
    "forces['NonbondedForce'].setUseDispersionCorrection(True)\n",
    "forces['NonbondedForce'].setEwaldErrorTolerance(1.0e-5)\n",
    "\n",
    "integrator = omm.LangevinIntegrator(temperature, collisions_rate, integration_timestep)\n",
    "integrator.setConstraintTolerance(0.00001)\n",
    "\n",
    "platform = omm.Platform.getPlatformByName('CUDA')\n",
    "simulation_properties = {}\n",
    "simulation_properties['CudaPrecision']='mixed'\n",
    "\n",
    "# Context.\n",
    "\n",
    "context = omm.Context(system, integrator, platform, simulation_properties)\n",
    "context.setPositions(positions)\n",
    "\n",
    "# Energy Minimization\n",
    "Potential_Energy = context.getState(getEnergy=True).getPotentialEnergy()\n",
    "print('Before energy minimization: {}'.format(Potential_Energy))\n",
    "omm.LocalEnergyMinimizer_minimize(context)\n",
    "Potential_Energy = context.getState(getEnergy=True).getPotentialEnergy()\n",
    "print('After energy minimization: {}'.format(Potential_Energy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 49/49 [05:04<00:00,  6.21s/it]\n"
     ]
    }
   ],
   "source": [
    "# Initial velocities\n",
    "n_atoms = topology.getNumAtoms()\n",
    "velocities = np.zeros([n_atoms, 3], np.float32) * unit.nanometers/unit.picosecond\n",
    "context.setVelocities(velocities)\n",
    "\n",
    "# Reporter arrays: time, position, velocity, kinetic_energy, potential_energy\n",
    "\n",
    "time = np.zeros([n_cicles], np.float32) * unit.picoseconds\n",
    "trajectory = np.zeros([n_cicles, n_atoms, 3], np.float32) * unit.nanometers\n",
    "velocity = np.zeros([n_cicles, n_atoms, 3], np.float32) * unit.nanometers/unit.picosecond\n",
    "kinetic_energy = np.zeros([n_cicles], np.float32) * unit.kilocalories_per_mole\n",
    "potential_energy = np.zeros([n_cicles], np.float32) * unit.kilocalories_per_mole\n",
    "\n",
    "# Initial context in reporters\n",
    "\n",
    "state = context.getState(getPositions=True, getVelocities=True, getEnergy=True)\n",
    "time[0] = state.getTime()\n",
    "trajectory[0] = state.getPositions()\n",
    "velocity[0] = state.getVelocities()\n",
    "kinetic_energy[0] = state.getKineticEnergy()\n",
    "potential_energy[0] = state.getPotentialEnergy()\n",
    "\n",
    "# Integration loop saving every cicle steps\n",
    "\n",
    "for ii in tqdm(range(1, n_cicles)):\n",
    "    context.getIntegrator().step(steps_per_cicle)\n",
    "    state = context.getState(getPositions=True, getVelocities=True, getEnergy=True)\n",
    "    time[ii] = state.getTime()\n",
    "    trajectory[ii] = state.getPositions()\n",
    "    velocity[ii] = state.getVelocities()\n",
    "    kinetic_energy[ii] = state.getKineticEnergy()\n",
    "    potential_energy[ii] = state.getPotentialEnergy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 4333, 3)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trajectory.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The trajectory occupies 0.002421252429485321 gigabytes.\n"
     ]
    }
   ],
   "source": [
    "print('The trajectory occupies {} gigabytes.'.format(trajectory.nbytes / 1024**3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(time, potential_energy)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "_, _, phi_values, psi_values = msm.ramachandran_angles([topology, trajectory])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(phi_values, psi_values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With MolSysMT "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With this library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from molecular_systems import AlanineDipeptideExplicitSolvent\n",
    "from molecular_systems.tools.md import langevin_NVT, energy_minimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Potential energy before minimization: -17415.52575900621 kJ/mol\n",
      "Potential energy after minimization: -70408.30700900621 kJ/mol\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 49/49 [04:02<00:00,  4.95s/it]\n"
     ]
    }
   ],
   "source": [
    "dialanine=AlanineDipeptideExplicitSolvent(forcefield='AMBER14')\n",
    "\n",
    "energy_minimization(dialanine)\n",
    "time, trajectory, velocity, kin_energy, pot_energy = langevin_NVT(dialanine,\n",
    "                                                                  temperature = 300 * unit.kelvin,\n",
    "                                                                  friction = 1.0 / unit.picoseconds,\n",
    "                                                                  saving_timestep = 1.0 * unit.picoseconds,\n",
    "                                                                  total_time = 50.0 * unit.picoseconds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "_, _, phi_values, psi_values = msm.ramachandran_angles([dialanine.topology, trajectory])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7ff0d4dade50>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(phi_values, psi_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "03bdadf0f50b4e0ab5035d3a85eede1e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "NGLWidget(max_frame=49)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "view = msm.view([dialanine.topology, trajectory], surface=False)\n",
    "view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
