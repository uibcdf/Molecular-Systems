{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Molecular system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With OpenMM\n",
    "\n",
    "```python\n",
    "import openmm as mm\n",
    "import openmm.app as app\n",
    "import openmm.unit as unit\n",
    "import numpy as np\n",
    "\n",
    "# Parameters\n",
    "\n",
    "n_particles = 1\n",
    "mass = 32.0 * unit.amu\n",
    "Eo=3.0 * unit.kilocalories_per_mole\n",
    "a=5.0 * unit.angstroms\n",
    "b=0.0 * unit.kilocalories_per_mole\n",
    "k=1.0 * unit.kilocalories_per_mole/unit.angstrom**2\n",
    "\n",
    "# OpenMM topology\n",
    "\n",
    "topology = app.Topology()\n",
    "\n",
    "dummy_element = app.Element(0, 'DUM', 'DUM', 0.0 * unit.amu)\n",
    "\n",
    "chain = topology.addChain('A')\n",
    "for ii in range(n_particles):\n",
    "    residue = topology.addResidue('DUM', chain)\n",
    "    atom = topology.addAtom(name='DUM', element= dummy_element, residue=residue)\n",
    "\n",
    "# OpenMM system\n",
    "\n",
    "system = mm.System()\n",
    "\n",
    "for _ in range(n_particles):\n",
    "    self.system.addParticle(dummy_element.mass)\n",
    "\n",
    "A = Eo/(a**4)\n",
    "B = -2.0*Eo/(a**2)\n",
    "C = -b/a\n",
    "D = k/2.0\n",
    "\n",
    "force = mm.CustomExternalForce('A*x^4+B*x^2+C*x + D*(y^2+z^2)')\n",
    "force.addGlobalParameter('A', A)\n",
    "force.addGlobalParameter('B', B)\n",
    "force.addGlobalParameter('C', C)\n",
    "force.addGlobalParameter('D', D)\n",
    "\n",
    "for ii in range(n_particles):\n",
    "    force.addParticle(ii, [])\n",
    "_ = self.system.addForce(force)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With this library\n",
    "\n",
    "This test system is fully documented in [DoubleWell class API](../api/_autosummary/uibcdf_test_systems.DoubleWell.html). Let's see an example of how to interact with it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from openmm import unit\n",
    "\n",
    "from uibcdf_systems import DoubleWell\n",
    "\n",
    "molecular_system = DoubleWell(n_particles = 1, mass = 64 * unit.amu,\n",
    "                              Eo=3.0 * unit.kilocalories_per_mole,\n",
    "                              a=5.0 * unit.angstroms, b=0.0 * unit.kilocalories_per_mole,\n",
    "                              k=1.0 * unit.kilocalories_per_mole/unit.angstrom**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The potential expression and the value of the parameters are stored in `potential`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle Eo \\left(- \\frac{2.0 x^{2}}{a^{2}} + \\frac{x^{4}}{a^{4}}\\right) + 0.5 k \\left(y^{2} + z^{2}\\right) - \\frac{b x}{a}$"
      ],
      "text/plain": [
       "Eo*(-2.0*x**2/a**2 + x**4/a**4) + 0.5*k*(y**2 + z**2) - b*x/a"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.potential_expression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_particles': 1,\n",
       " 'mass': Quantity(value=64, unit=dalton),\n",
       " 'Eo': Quantity(value=3.0, unit=kilocalorie/mole),\n",
       " 'a': Quantity(value=5.0, unit=angstrom),\n",
       " 'b': Quantity(value=0.0, unit=kilocalorie/mole),\n",
       " 'k': Quantity(value=1.0, unit=kilocalorie/(angstrom**2*mole))}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And there is a method to evaluate the potential at a given positions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Quantity(value=189.0000000000001, unit=kilocalorie/mole)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.evaluate_potential([-1.5, 0.0, 0.0] * unit.nanometers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "position = np.zeros((200,3), dtype=float) * unit.nanometers\n",
    "position[:,0] = np.linspace(-1., 1., 200) * unit.nanometers\n",
    "\n",
    "plt.plot(position[:,0], molecular_system.evaluate_potential(position) , 'r-')\n",
    "plt.ylim(-4,1)\n",
    "plt.xlim(-1,1)\n",
    "plt.grid()\n",
    "plt.xlabel(\"X ({})\".format(unit.nanometers))\n",
    "plt.ylabel(\"Energy ({})\".format(unit.kilocalories_per_mole))\n",
    "plt.title(\"Symmetric Double Well\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And the system to be used with OpenMM is accesible as:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<openmm.openmm.System; proxy of <Swig Object of type 'OpenMM::System *' at 0x7f55e8bcbcc0> >"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.system"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Quantity(value=array([-0.5,  0. ,  0. ]), unit=nanometer),\n",
       " Quantity(value=array([0.5, 0. , 0. ]), unit=nanometer)]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.get_coordinates_minima()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Quantity(value=array([0., 0., 0.]), unit=nanometer)]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.get_coordinates_maximum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([Quantity(value=array([-0.5,  0. ,  0. ]), unit=nanometer),\n",
       "  Quantity(value=array([0.5, 0. , 0. ]), unit=nanometer)],\n",
       " [Quantity(value=array([2.50806277, 2.45738961, 2.45738961]), unit=picosecond),\n",
       "  Quantity(value=array([2.50806277, 2.45738961, 2.45738961]), unit=picosecond)])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.get_small_oscillations_time_periods_around_minima()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([Quantity(value=array([-0.5,  0. ,  0. ]), unit=nanometer),\n",
       "  Quantity(value=array([0.5, 0. , 0. ]), unit=nanometer)],\n",
       " [Quantity(value=array([0.07880364, 0.07721148, 0.07721148]), unit=nanometer),\n",
       "  Quantity(value=array([0.07880364, 0.07721148, 0.07721148]), unit=nanometer)])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "molecular_system.get_harmonic_standard_deviations_around_minima(temperature=300*unit.kelvin)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
